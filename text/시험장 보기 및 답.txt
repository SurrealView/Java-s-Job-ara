1. 변수의 맨 앞글자는 대문자로 한다.^
2. 단어가 바뀔 시 앞글자는 대문자로 한다.^
3. 예약어는 사용할 수 없다^$

1. int nomber=1;^
2. String class="1반";^
3. char  gender='남';^$

1. long^
2. double^
3. char^$

1. int a = 'a';^
2. double d = 1;^
3. String s = 'coffee';$^

1. 작은 자료형에서 큰자료형으로 변환시 자동형변환이 일어난다.^
2. 정수는 실수로 자동 형변환 된다.^
3. Boolean은 강제 형변환을 해야 한다.^$

1. String a = "apple";  System.out.println(a=="apple");^
2. String a = ((a > 3) | (a > 1))? "true" : "false";^
3. int a = 0; a+= 3;^$

1. ++  증감연산자^
2. += 누적대입연산자^
3.  = 관계비교연산자^$

1. 논리연산자^
2. 산술연산자^
3. 대입연산자^$

1. ||^
2. &&^
3. ==^$

1. a < = b? a++ : b- -;^
2. a + b ? a++: b- -;^
3. a == b? (b == c? a++: b++);^$

1. for(int i =0; i>100; i++){}^ 
2. for(int i=1; i <1; i++){}^
3. while(false);^$

1. 문자열의 값으로 조건을 나눌때 switch보다 유리하다^
2. 첫번째 조건에 부합하지않을때 세부 나눌 조건이 있다면 else if를 이용해 자세하게 물어볼 수 있다.^
3. 조건에 부합하지 않는 경우 else를 이용해 로직을 작성할 수 있다.^$

1 .증감식을 직접 작성해주어야 한다^
2. do를 같이 사용해주어야만 사용이 가능하다^
3. while(true)를 사용하면 break가 발동하기 전까지 무한으로 즐길 수 있다.^$

1. break^
2. return^ 
3. continue^$

1. for(int i = 0; i<10, i++){}^
2. for(int a : arr[]){}^
3. for(int i,j; i<100||j<50; i+=2,j++){}^$

1. stack에서 선언되어 heap메모리 영역에 할당 받는다.^
2. 5칸의 배열을 선언하면 1~5까지 인덱스를 부여받는다.^
3. 배열의 인덱스를 이용해 동일한 자료형을 반복문으로  묶어 관리할 수 있다.^$

1. int[] a = new int [5];^
2. int a[] = new int [5];^
3. int[] a = new int[5],{1,2,3,4,5};^$

1.size()^
2.length()^
3.sizeof()^$

1. arraycopy() 메소드를 이용하여 복사한다.^
2. int arr1[1] = arr2[1];^ 
3. int[] arr1 = arr2;^$

1. 삽입정렬^
2. 버블정렬^
3. 선택정렬^$

1. 추상화^
2. 다형성^
3. 캡슐화^$

1. private^
2.  static^
3. protected^$

1. public static final int a;^
2. public final static int a = 3;^
3. private static String ="1";^$


1.오버로딩이 불가능하다.^
2.매개변수를 넣을 수 없다^
3.this를 통해  멤버변수에 값을 넣어줄 수 있다.^$

1. 멤버 변수^
2. 클래스 변수^
3. 지역 변수^$

1. 상속을 여러개 받아 만든 클래스를 슈퍼클래스라 한다.^
2. 상속을 이용하면  유지보수성을 더욱 좋게 할 수 있다^
3. 부모에게 상속 받은 것을 자식 입맞에 맞게 업데이트 하는 기법을 오버로딩이라 한다.^$

1. Object^
2. EveryThing^
3. System^$

1. 상속^
2. 오버로딩^
3. 오버라이딩^$

1. 메소드를 같은 클래스에서 정의^
2. 예외 발생 시 같거나 더 구체적인 예외형식^
3. 접근제어자는 관계 없음^$

1. 부모 클래스^
2. 서브 클래스^
3. 슈퍼 클래스^$

1.insteadOf^
2.isParent^
3.instanceOf^$

1. 자동바인딩^
2. 이동바인딩^
3. 동적바인딩^$

1. static final String IHG ="인효근";^
2. void  sample(){}^
3. String IHG="인효근";^$

1. public class StudentLee  extends Princess implements Bold,Tired{}^
2. public class StudentLee extends Princess,Prince implements Tired{}^
3. public class StudentLee extends Princess,implements Tired{}^$

1. 생성자 통해 객체 생성 가능^
2. 오버라이딩이 강제화 됨^
3. 객체 생성이 가능^$

1. 문자열 값을 수정할 수 없는 불변이다^
2. 기본 16문자 크기로 지정된 버퍼를 이용하여 크기증가 가능^
3. 쓰레드 safe 기능을 제공하지 않음^$

1. Date^
2. GregorianCalendar^
3. WhatTime^$

1. subString()^
2. split()^
3. StringTokenizer^$

1. String Buffer 클래스^
2. String Builder 클래스^
3. String 클래스^$

1. 오토언박싱(Auto Unboxing)^
2. 오토박싱(Auto Boxing)^
3. 예외처리^$

1. 컴파일 에러^
2. 논리 에러^
3. 커맨드에러^$

1. EOFException^
2. TypeMissMatchException^
3. FileNotFoundException^$

1.throws로 예외 던지기^
2.try~catch표현식으로 감싸주기^
3.예외가 발생하는 구간에 main메소드 추가^$

1. IndexOutOfBounds Exception^
2. NullPointer Exception^
3. FileNotFound Exception^$

1. ClassCast Exception^
2. ArrayIndexOutOfBound Exception^
3. Arithmetic Exception^$

1. Properties^
2. Vector^
3. ArrayList^$

1.add^
2.length^
3. clear^$

1. Set^
2. Map^
3. List^$

1.Stack^
2.Queue^
3.Heap^$


1.자동적으로 배열의 길이가 늘어난다^
2.수정이나 제거시 관리가 용이하다^
3. 인접 참조를 링크해서 체인처럼 관리할 수 있다.^$